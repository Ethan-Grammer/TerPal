{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Completions = void 0;\nconst resource_1 = require(\"groq-sdk/resource\");\nclass Completions extends resource_1.APIResource {\n  create(body, options) {\n    return this._client.post('/openai/v1/chat/completions', {\n      body,\n      ...options,\n      stream: body.stream ?? false\n    });\n  }\n}\nexports.Completions = Completions;\n(function (Completions) {})(Completions = exports.Completions || (exports.Completions = {}));","map":{"version":3,"names":["resource_1","require","Completions","APIResource","create","body","options","_client","post","stream","exports"],"sources":["/Users/ethan/Desktop/Projects/e-advisor/node_modules/groq-sdk/src/resources/chat/completions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as CompletionsAPI from \"./completions\";\nimport { Stream } from \"../../lib/streaming\";\nimport { ChatCompletionChunk } from \"../../lib/chat_completions_ext\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a completion for a chat prompt\n   */\n  create(\n    body: ChatCompletionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Stream<ChatCompletionChunk>>;\n  create(\n    body: ChatCompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>> {\n    return this._client.post('/openai/v1/chat/completions', { body, ...options, stream: body.stream ?? false }) as\n      | Core.APIPromise<ChatCompletion>\n      | Core.APIPromise<Stream<ChatCompletionChunk>>;\n  }\n}\n\nexport interface ChatCompletion {\n  choices: Array<ChatCompletion.Choice>;\n\n  id?: string;\n\n  created?: number;\n\n  model?: string;\n\n  object?: string;\n\n  system_fingerprint?: string;\n\n  usage?: ChatCompletion.Usage;\n}\n\nexport namespace ChatCompletion {\n  export interface Choice {\n    finish_reason: string;\n\n    index: number;\n\n    logprobs: Choice.Logprobs;\n\n    message: Choice.Message;\n  }\n\n  export namespace Choice {\n    export interface Logprobs {\n      content?: Array<Logprobs.Content>;\n    }\n\n    export namespace Logprobs {\n      export interface Content {\n        token?: string;\n\n        bytes?: Array<number>;\n\n        logprob?: number;\n\n        top_logprobs?: Array<Content.TopLogprob>;\n      }\n\n      export namespace Content {\n        export interface TopLogprob {\n          token?: string;\n\n          bytes?: Array<number>;\n\n          logprob?: number;\n        }\n      }\n    }\n\n    export interface Message {\n      content: string;\n\n      role: string;\n\n      tool_calls?: Array<Message.ToolCall>;\n    }\n\n    export namespace Message {\n      export interface ToolCall {\n        id?: string;\n\n        function?: ToolCall.Function;\n\n        type?: string;\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          arguments?: string;\n\n          name?: string;\n        }\n      }\n    }\n  }\n\n  export interface Usage {\n    completion_time?: number;\n\n    completion_tokens?: number;\n\n    prompt_time?: number;\n\n    prompt_tokens?: number;\n\n    queue_time?: number;\n\n    total_time?: number;\n\n    total_tokens?: number;\n  }\n}\n\nexport interface ChatCompletionCreateParamsBase {\n  messages: Array<CompletionCreateParams.Message>;\n\n  model: string;\n\n  frequency_penalty?: number;\n\n  logit_bias?: Record<string, number>;\n\n  logprobs?: boolean;\n\n  max_tokens?: number;\n\n  n?: number;\n\n  presence_penalty?: number;\n\n  response_format?: CompletionCreateParams.ResponseFormat;\n\n  seed?: number;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  stream?: boolean;\n\n  temperature?: number;\n\n  tool_choice?: CompletionCreateParams.ToolChoice;\n\n  tools?: Array<CompletionCreateParams.Tool>;\n\n  top_logprobs?: number;\n\n  top_p?: number;\n\n  user?: string;\n}\n\nexport namespace CompletionCreateParams {\n  export interface Message {\n    content: string;\n\n    role: string;\n\n    name?: string;\n\n    /**\n     * ToolMessage Fields\n     */\n    tool_call_id?: string;\n\n    /**\n     * AssistantMessage Fields\n     */\n    tool_calls?: Array<Message.ToolCall>;\n  }\n\n  export namespace Message {\n    export interface ToolCall {\n      id?: string;\n\n      function?: ToolCall.Function;\n\n      type?: string;\n    }\n\n    export namespace ToolCall {\n      export interface Function {\n        arguments?: string;\n\n        name?: string;\n      }\n    }\n  }\n\n  export interface ResponseFormat {\n    type?: string;\n  }\n\n  export interface ToolChoice {\n    string?: string;\n\n    toolChoice?: ToolChoice.ToolChoice;\n  }\n\n  export namespace ToolChoice {\n    export interface ToolChoice {\n      function?: ToolChoice.Function;\n\n      type?: string;\n    }\n\n    export namespace ToolChoice {\n      export interface Function {\n        name?: string;\n      }\n    }\n  }\n\n  export interface Tool {\n    function?: Tool.Function;\n\n    type?: string;\n  }\n\n  export namespace Tool {\n    export interface Function {\n      description?: string;\n\n      name?: string;\n\n      parameters?: Record<string, unknown>;\n    }\n  }\n}\n\nexport namespace Completions {\n  export import ChatCompletion = CompletionsAPI.ChatCompletion;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n}\n\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\n  stream?: false;\n}\n\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\n  stream: true;\n}\n\nexport type ChatCompletionCreateParams =\n  | ChatCompletionCreateParamsNonStreaming\n  | ChatCompletionCreateParamsStreaming;\n"],"mappings":";;AAAA;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AAKA,MAAaC,WAAY,SAAQF,UAAA,CAAAG,WAAW;EAgB1CC,MAAMA,CACJC,IAAgC,EAChCC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,6BAA6B,EAAE;MAAEH,IAAI;MAAE,GAAGC,OAAO;MAAEG,MAAM,EAAEJ,IAAI,CAACI,MAAM,IAAI;IAAK,CAAE,CAE1D;EAClD;;AAvBFC,OAAA,CAAAR,WAAA,GAAAA,WAAA;AAoPA,WAAiBA,WAAW,GAG5B,CAAC,EAHgBA,WAAW,GAAXQ,OAAA,CAAAR,WAAW,KAAXQ,OAAA,CAAAR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}