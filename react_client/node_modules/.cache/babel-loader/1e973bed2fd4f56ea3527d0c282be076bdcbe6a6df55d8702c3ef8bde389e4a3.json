{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Translations = void 0;\nconst resource_1 = require(\"groq-sdk/resource\");\nconst core_1 = require(\"groq-sdk/core\");\nclass Translations extends resource_1.APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/audio/translations', (0, core_1.multipartFormRequestOptions)({\n      body,\n      ...options\n    }));\n  }\n}\nexports.Translations = Translations;\n(function (Translations) {})(Translations = exports.Translations || (exports.Translations = {}));","map":{"version":3,"names":["resource_1","require","core_1","Translations","APIResource","create","body","options","_client","post","multipartFormRequestOptions","exports"],"sources":["/Users/ethan/Desktop/Projects/e-advisor/node_modules/groq-sdk/src/resources/audio/translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranslationsAPI from \"./translations\";\nimport * as AudioAPI from \"./audio\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(\n    body: TranslationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<AudioAPI.Translation> {\n    return this._client.post(\n      '/openai/v1/audio/translations',\n      multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\n   */\n  model: (string & {}) | 'whisper-large-v3';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\n   * English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n}\n"],"mappings":";;AAAA;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AAGA,MAAAC,MAAA,GAAAD,OAAA;AAEA,MAAaE,YAAa,SAAQH,UAAA,CAAAI,WAAW;EAC3C;;;EAGAC,MAAMA,CACJC,IAA6B,EAC7BC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CACtB,+BAA+B,EAC/B,IAAAP,MAAA,CAAAQ,2BAA2B,EAAC;MAAEJ,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC,CAClD;EACH;;AAZFI,OAAA,CAAAR,YAAA,GAAAA,YAAA;AAkDA,WAAiBA,YAAY,GAE7B,CAAC,EAFgBA,YAAY,GAAZQ,OAAA,CAAAR,YAAY,KAAZQ,OAAA,CAAAR,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}