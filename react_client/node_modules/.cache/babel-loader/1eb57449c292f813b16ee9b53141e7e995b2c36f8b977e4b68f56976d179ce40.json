{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/Projects/e-advisor/TerPal/src/components/Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chatbox.css'; // Import CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [initialUploadDone, setInitialUploadDone] = useState(false); // New state to track the initial upload\n\n  useEffect(() => {\n    setMessages(welcomeMessages);\n  }, []);\n\n  // Retrieves transcript from file input\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await axios.post('http://localhost:3001/upload', formData);\n        const initialMesage = response.data.response;\n        setInitialUploadDone(true); // Update state to indicate that the file has been uploaded\n\n        setMessages([...messages, {\n          text: initialMesage,\n          sender: 'ai',\n          label: 'TerpPal'\n        }]);\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        setMessages([...messages, {\n          text: \"Failed to upload file.\",\n          sender: 'ai',\n          label: 'TerpPal'\n        }]);\n      }\n    }\n  };\n\n  // Sends user message to Groq API\n  const sendMessage = async msg => {\n    const newMessages = [...messages, {\n      text: msg,\n      sender: 'user',\n      label: 'You'\n    }];\n    setMessages(newMessages);\n    try {\n      const response = await axios.post('http://localhost:3001/chat', {\n        messages: msg\n      });\n      const aiMessage = response.data.response;\n      setMessages([...newMessages, {\n        text: aiMessage,\n        sender: 'ai',\n        label: 'TerpPal'\n      }]);\n    } catch (error) {\n      console.error('Error communicating with the chat API:', error);\n      setMessages([...newMessages, {\n        text: \"Failed to get a response.\",\n        sender: 'ai',\n        label: 'TerpPal'\n      }]);\n    }\n  };\n\n  // Return structured Chatbox HTML\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageContainer\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `senderLabel ${message.sender}`,\n          children: message.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), message.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: initialUploadDone ?\n      /*#__PURE__*/\n      // Can only start chatting after you upload your transcript file\n      _jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"Type your message here...\",\n        onKeyDown: e => {\n          if (e.key === 'Enter' && e.target.value.trim()) {\n            sendMessage(e.target.value);\n            e.target.value = ''; // Clear the input after sending\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          id: \"fileInput\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: \"Choose file to upload transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbox, \"gFY6DcEIe3RuPtEVsFFJfC4u0kk=\");\n_c = Chatbox;\nconst welcomeMessages = [{\n  text: \"Hello, welcome to UMD's Virtual Advising. To get started, please upload your Unofficial Transcript.\",\n  sender: 'ai',\n  label: 'TerpPal'\n}, {\n  text: \"If you are having trouble finding your transcript, you can go to https://www.testudo.umd.edu to retrieve it.\",\n  sender: 'ai',\n  label: 'TerpPal'\n}];\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Chatbox","_s","messages","setMessages","initialUploadDone","setInitialUploadDone","welcomeMessages","handleFileUpload","event","file","target","files","formData","FormData","append","response","post","initialMesage","data","text","sender","label","error","console","sendMessage","msg","newMessages","aiMessage","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","e","key","value","trim","onChange","id","style","display","htmlFor","_c","$RefreshReg$"],"sources":["/Users/ethan/Desktop/Projects/e-advisor/TerPal/src/components/Chatbox.js"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './Chatbox.css'; // Import CSS\n\nfunction Chatbox() {\n  const [messages, setMessages] = useState([]);\n  const [initialUploadDone, setInitialUploadDone] = useState(false); // New state to track the initial upload\n\n  useEffect(() => {setMessages(welcomeMessages);}, []);\n\n  // Retrieves transcript from file input\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await axios.post('http://localhost:3001/upload', formData);\n        const initialMesage = response.data.response\n\n        setInitialUploadDone(true); // Update state to indicate that the file has been uploaded\n        \n        setMessages([...messages, { text: initialMesage, sender: 'ai', label: 'TerpPal' }]);\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        setMessages([...messages, { text: \"Failed to upload file.\", sender: 'ai', label: 'TerpPal' }]);\n      }\n    }\n  };\n\n  // Sends user message to Groq API\n  const sendMessage = async (msg) => {\n    const newMessages = [...messages, { text: msg, sender: 'user', label: 'You' }];\n    setMessages(newMessages);\n    try {\n      const response = await axios.post('http://localhost:3001/chat', {\n        messages: msg\n      });\n\n      const aiMessage = response.data.response;\n      setMessages([...newMessages, { text: aiMessage, sender: 'ai', label: 'TerpPal' }]);\n    } catch (error) {\n      console.error('Error communicating with the chat API:', error);\n      setMessages([...newMessages, { text: \"Failed to get a response.\", sender: 'ai', label: 'TerpPal' }]);\n    }\n  };\n\n\n\n\n  // Return structured Chatbox HTML\n  return (\n    <div className=\"container\">\n      <div className=\"messageContainer\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.sender}`}>\n            <span className={`senderLabel ${message.sender}`}>{message.label}</span>\n            {message.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"inputContainer\">\n        {initialUploadDone ? ( // Can only start chatting after you upload your transcript file\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Type your message here...\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && e.target.value.trim()) {\n                sendMessage(e.target.value);\n                e.target.value = ''; // Clear the input after sending\n              }\n            }}\n          />\n        ) : (\n          <div>\n            <input type=\"file\" onChange={handleFileUpload} id=\"fileInput\" style={{ display: 'none' }} />\n            <label htmlFor=\"fileInput\">Choose file to upload transcript</label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n}\n\nconst welcomeMessages = [{\n    text: \"Hello, welcome to UMD's Virtual Advising. To get started, please upload your Unofficial Transcript.\",\n    sender: 'ai',\n    label: 'TerpPal'\n    },\n    {\n      text: \"If you are having trouble finding your transcript, you can go to https://www.testudo.umd.edu to retrieve it.\",\n      sender: 'ai',\n      label: 'TerpPal'\n}];\n\nexport default Chatbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}