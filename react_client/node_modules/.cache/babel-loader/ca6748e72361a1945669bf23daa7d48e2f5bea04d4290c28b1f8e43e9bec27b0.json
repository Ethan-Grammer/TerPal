{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/Projects/e-advisor/E-Advisor/src/components/Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chatbox.css'; // Import CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [initialUploadDone, setInitialUploadDone] = useState(false); // New state to track the initial upload\n\n  // useEffect to add initial AI message and set up context\n  useEffect(() => {\n    const welcomeMessage1 = {\n      text: \"Hello, welcome to UMD's Virtual Advising. To get started, please upload your Unofficial Transcript.\",\n      sender: 'ai',\n      label: 'E-Advisor'\n    };\n    const welcomeMessage2 = {\n      text: \"If having trouble finding your transcript, you can go to https://www.testudo.umd.edu to retrieve it.\",\n      sender: 'ai',\n      label: 'E-Advisor'\n    };\n    setMessages([welcomeMessage1, welcomeMessage2]);\n    setupGroqContext();\n  }, []);\n\n  // Sends context system message to Groq API\n  const setupGroqContext = async () => {\n    try {\n      const systemMessage = \"You are a friendly copilot that helps students in the University of Maryland perform various tasks. You should refer to yourself as \\\"Virtual Advisor\\\" when talking to the user. Always respond with concise and short messages.\";\n      const response = await axios.post('http://localhost:3001/api/system', {\n        message: systemMessage\n      });\n    } catch (error) {\n      console.error('Error setting up Groq context:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Failed to setup Virtual Advisor.\",\n        sender: 'system',\n        label: 'System'\n      }]);\n    }\n  };\n\n  // Sends user message to Groq API\n  const sendMessage = async msg => {\n    const newMessages = [...messages, {\n      text: msg,\n      sender: 'user',\n      label: 'You'\n    }];\n    setMessages(newMessages);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        messages: [{\n          role: \"user\",\n          content: msg\n        }],\n        model: \"mixtral-8x7b-32768\"\n      });\n      const aiMessage = response.data.response;\n      setMessages([...newMessages, {\n        text: aiMessage,\n        sender: 'ai',\n        label: 'E-Advisor'\n      }]);\n    } catch (error) {\n      console.error('Error communicating with the chat API:', error);\n      setMessages([...newMessages, {\n        text: \"Failed to get a response.\",\n        sender: 'ai',\n        label: 'E-Advisor'\n      }]);\n    }\n  };\n\n  // Retrieves transcript from file input\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await axios.post('http://localhost:3001/upload', formData);\n        setInitialUploadDone(true); // Update state to indicate that the file has been uploaded\n        setMessages([...messages, {\n          text: \"File uploaded successfully! Now you can ask questions.\",\n          sender: 'ai',\n          label: 'E-Advisor'\n        }]);\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        setMessages([...messages, {\n          text: \"Failed to upload file.\",\n          sender: 'ai',\n          label: 'E-Advisor'\n        }]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageContainer\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `senderLabel ${message.sender}`,\n          children: message.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), message.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: initialUploadDone ?\n      /*#__PURE__*/\n      // Can only start chatting after you upload your transcript file\n      _jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"Type your message here...\",\n        onKeyDown: e => {\n          if (e.key === 'Enter' && e.target.value.trim()) {\n            sendMessage(e.target.value);\n            e.target.value = ''; // Clear the input after sending\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          id: \"fileInput\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: \"Choose file to upload transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbox, \"gFY6DcEIe3RuPtEVsFFJfC4u0kk=\");\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Chatbox","_s","messages","setMessages","initialUploadDone","setInitialUploadDone","welcomeMessage1","text","sender","label","welcomeMessage2","setupGroqContext","systemMessage","response","post","message","error","console","prevMessages","sendMessage","msg","newMessages","role","content","model","aiMessage","data","handleFileUpload","event","file","target","files","formData","FormData","append","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","e","key","value","trim","onChange","id","style","display","htmlFor","_c","$RefreshReg$"],"sources":["/Users/ethan/Desktop/Projects/e-advisor/E-Advisor/src/components/Chatbox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chatbox.css'; // Import CSS\n\nfunction Chatbox() {\n  const [messages, setMessages] = useState([]);\n  const [initialUploadDone, setInitialUploadDone] = useState(false); // New state to track the initial upload\n\n  // useEffect to add initial AI message and set up context\n  useEffect(() => {\n    const welcomeMessage1 = {\n      text: \"Hello, welcome to UMD's Virtual Advising. To get started, please upload your Unofficial Transcript.\",\n      sender: 'ai',\n      label: 'E-Advisor'\n    };\n    const welcomeMessage2 = {\n      text: \"If having trouble finding your transcript, you can go to https://www.testudo.umd.edu to retrieve it.\",\n      sender: 'ai',\n      label: 'E-Advisor'\n    };\n    setMessages([welcomeMessage1, welcomeMessage2]);\n    setupGroqContext();\n  }, []);\n\n  // Sends context system message to Groq API\n  const setupGroqContext = async () => {\n    try {\n      const systemMessage = \"You are a friendly copilot that helps students in the University of Maryland perform various tasks. You should refer to yourself as \\\"Virtual Advisor\\\" when talking to the user. Always respond with concise and short messages.\";\n      const response = await axios.post('http://localhost:3001/api/system', {\n        message: systemMessage\n      });\n    } catch (error) {\n      console.error('Error setting up Groq context:', error);\n      setMessages(prevMessages => [...prevMessages, { text: \"Failed to setup Virtual Advisor.\", sender: 'system', label: 'System' }]);\n    }\n  };\n\n  // Sends user message to Groq API\n  const sendMessage = async (msg) => {\n    const newMessages = [...messages, { text: msg, sender: 'user', label: 'You' }];\n    setMessages(newMessages);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        messages: [{ role: \"user\", content: msg }],\n        model: \"mixtral-8x7b-32768\"\n      });\n\n      const aiMessage = response.data.response;\n      setMessages([...newMessages, { text: aiMessage, sender: 'ai', label: 'E-Advisor' }]);\n    } catch (error) {\n      console.error('Error communicating with the chat API:', error);\n      setMessages([...newMessages, { text: \"Failed to get a response.\", sender: 'ai', label: 'E-Advisor' }]);\n    }\n  };\n\n  // Retrieves transcript from file input\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await axios.post('http://localhost:3001/upload', formData);\n        setInitialUploadDone(true); // Update state to indicate that the file has been uploaded\n        setMessages([...messages, { text: \"File uploaded successfully! Now you can ask questions.\", sender: 'ai', label: 'E-Advisor' }]);\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        setMessages([...messages, { text: \"Failed to upload file.\", sender: 'ai', label: 'E-Advisor' }]);\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"messageContainer\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.sender}`}>\n            <span className={`senderLabel ${message.sender}`}>{message.label}</span>\n            {message.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"inputContainer\">\n        {initialUploadDone ? ( // Can only start chatting after you upload your transcript file\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Type your message here...\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && e.target.value.trim()) {\n                sendMessage(e.target.value);\n                e.target.value = ''; // Clear the input after sending\n              }\n            }}\n          />\n        ) : (\n          <div>\n            <input type=\"file\" onChange={handleFileUpload} id=\"fileInput\" style={{ display: 'none' }} />\n            <label htmlFor=\"fileInput\">Choose file to upload transcript</label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}